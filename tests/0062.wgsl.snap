ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 17 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 28, .end = 29 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 31, .end = 34 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 37, .end = 38 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .switch_stmt = ast.Switch{ .expression = ast.Node{ .identifier = ast.Span{ .start = 49, .end = 50 } }, .attributes = null, .clauses = { ast.SwitchClause{ .default = ast.SwitchClause.Default{ .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 74, .end = 79 } } } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 181, .end = 182 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 185, .end = 186 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } 