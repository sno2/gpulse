ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 7, .end = 8 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 13, .end = 14 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 17, .end = 20 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 24, .end = 25 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 28, .end = 31 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 35, .end = 36 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 39, .end = 42 } } } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 53, .end = 54 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 65, .end = 66 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 81, .end = 82 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 85, .end = 86 } }, .value = null } } } } ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 92, .end = 95 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 106, .end = 107 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 110, .end = 111 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 112, .end = 113 } } } } } } } } } 