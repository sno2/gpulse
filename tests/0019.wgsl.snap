ast.Node{ .type_alias = ast.TypeAlias{ .name = ast.Span{ .start = 23, .end = 28 }, .value = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 31, .end = 36 }, .args = { ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 37, .end = 41 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 42, .end = 45 } } } } } } } } } } ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 56, .end = 57 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 62, .end = 63 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 65, .end = 68 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 72, .end = 73 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 75, .end = 78 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 82, .end = 86 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 88, .end = 93 } } } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 103, .end = 104 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 115, .end = 116 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 131, .end = 137 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 139, .end = 140 } }, .value = null } } } } 