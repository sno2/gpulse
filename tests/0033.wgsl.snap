ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 23, .end = 26 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 29, .end = 32 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 42, .end = 43 }, .typ = null, .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 46, .end = 47 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 50, .end = 51 } } } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 54, .end = 55 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 58, .end = 59 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } 