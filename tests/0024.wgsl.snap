ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 7, .end = 15 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 20, .end = 28 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 30, .end = 34 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 35, .end = 38 } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 43, .end = 51 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 53, .end = 57 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 58, .end = 61 } } } } } } } } } } ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 72, .end = 78 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 83, .end = 95 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 97, .end = 100 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 104, .end = 112 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 114, .end = 117 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 121, .end = 130 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 132, .end = 137 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 138, .end = 146 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 147, .end = 150 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 161, .end = 162 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 173, .end = 174 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 200, .end = 206 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 208, .end = 214 } }, .value = null } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 242, .end = 243 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 248, .end = 252 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 325, .end = 340 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 342, .end = 345 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 346, .end = 353 } }, ast.Node{ .identifier = ast.Span{ .start = 354, .end = 362 } } } } }, .value = ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 373, .end = 379 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 380, .end = 389 } } } }, .rhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 390, .end = 396 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 397, .end = 409 } } } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 419, .end = 433 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 435, .end = 439 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 440, .end = 443 } } } } }, .value = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 449, .end = 464 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 466, .end = 474 } } } }, .rhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 477, .end = 483 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 484, .end = 492 } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 500, .end = 516 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 518, .end = 522 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 523, .end = 526 } } } } }, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 533, .end = 548 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 550, .end = 558 } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 564, .end = 579 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 581, .end = 589 } } } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 592, .end = 606 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 609, .end = 625 } } } } } } } } } } } 