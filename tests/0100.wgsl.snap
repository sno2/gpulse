ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 26, .end = 41 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 44, .end = 48 } }, .args = { ast.Node{ .number_literal = ast.Span{ .start = 49, .end = 52 } } } } } } } ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 85, .end = 95 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 98, .end = 102 } }, .args = { ast.Node{ .number_literal = ast.Span{ .start = 103, .end = 106 } } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 108, .end = 113 } } } } } } ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 145, .end = 155 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 158, .end = 162 } }, .args = { ast.Node{ .number_literal = ast.Span{ .start = 163, .end = 166 } } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 168, .end = 173 } } } } } } 