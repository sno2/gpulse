ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 4, .end = 5 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 7, .end = 10 } }, .value = ast.Node{ .number_literal = ast.Span{ .start = 13, .end = 14 } } } } ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 23, .end = 26 } }, .value = ast.Node{ .number_literal = ast.Span{ .start = 29, .end = 30 } } } } ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 44, .end = 45 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 49, .end = 50 } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 53, .end = 58 } } }, .next = null } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 69, .end = 73 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 75, .end = 78 } }, .value = ast.Node{ .number_literal = ast.Span{ .start = 81, .end = 82 } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .mod = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 90, .end = 91 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 94, .end = 95 } } } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 99, .end = 100 } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 103, .end = 111 } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 118, .end = 119 } }, .rhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 122, .end = 123 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 126, .end = 127 } } } } } }, ast.Node{ .continuing = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 158, .end = 159 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 162, .end = 163 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 166, .end = 170 } } } } } } } } } } } } 