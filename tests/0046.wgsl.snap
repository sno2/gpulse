ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 6, .end = 7 }, .typ = null, .value = ast.Node{ .number_literal = ast.Span{ .start = 10, .end = 11 } } } } ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 17, .end = 18 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 21, .end = 24 } }, .value = null } } ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 30, .end = 31 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 34, .end = 37 } }, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 40, .end = 53 } }, .args = {  } } } } } ast.Node{ .switch_stmt = ast.Switch{ .expression = ast.Node{ .identifier = ast.Span{ .start = 64, .end = 65 } }, .attributes = null, .clauses = { ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.Span{ .start = 75, .end = 76 } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 84, .end = 85 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 88, .end = 89 } } } } } } }, ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.Span{ .start = 102, .end = 103 } }, ast.Node{ .identifier = ast.Span{ .start = 105, .end = 106 } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 169, .end = 170 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 173, .end = 174 } } } } } } }, ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.Span{ .start = 187, .end = 188 } }, ast.Node{ .default_selector = ast.Span{ .start = 190, .end = 197 } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 258, .end = 259 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 262, .end = 263 } } } } } } } } } } 