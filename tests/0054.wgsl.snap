ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 4, .end = 5 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 7, .end = 10 } }, .value = ast.Node{ .number_literal = ast.Span{ .start = 13, .end = 14 } } } } ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 28, .end = 29 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 33, .end = 34 } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 37, .end = 42 } } }, .next = null } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .mod = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 51, .end = 52 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 55, .end = 56 } } } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 60, .end = 61 } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 64, .end = 72 } } }, .next = null } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 90, .end = 94 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 96, .end = 99 } }, .value = ast.Node{ .number_literal = ast.Span{ .start = 102, .end = 103 } } } }, ast.Node{ .continuing = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 125, .end = 126 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 129, .end = 130 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 133, .end = 137 } } } } } } } } } } } } 