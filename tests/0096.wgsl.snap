ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 7, .end = 14 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 19, .end = 24 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 26, .end = 29 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 33, .end = 36 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 38, .end = 41 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 45, .end = 55 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 57, .end = 62 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 63, .end = 67 } }, ast.Node{ .number_literal = ast.Span{ .start = 68, .end = 69 } } } } } } } } } } ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 77, .end = 81 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 92, .end = 93 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 95, .end = 102 } }, .value = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 139, .end = 140 } }, .rhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 143, .end = 150 } }, .args = {  } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 198, .end = 199 } }, .rhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 202, .end = 209 } }, .args = { ast.Node{ .number_literal = ast.Span{ .start = 210, .end = 211 } }, ast.Node{ .number_literal = ast.Span{ .start = 213, .end = 216 } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 218, .end = 223 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 224, .end = 228 } }, ast.Node{ .number_literal = ast.Span{ .start = 229, .end = 230 } } } } }, .args = { ast.Node{ .boolean_literal = ast.BooleanLiteral{ .span = ast.Span{ .start = 232, .end = 237 }, .value = false } }, ast.Node{ .boolean_literal = ast.BooleanLiteral{ .span = ast.Span{ .start = 239, .end = 244 }, .value = false } }, ast.Node{ .boolean_literal = ast.BooleanLiteral{ .span = ast.Span{ .start = 246, .end = 251 }, .value = false } }, ast.Node{ .boolean_literal = ast.BooleanLiteral{ .span = ast.Span{ .start = 253, .end = 258 }, .value = false } } } } } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 320, .end = 321 } }, .rhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 324, .end = 331 } }, .args = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 332, .end = 335 } }, .args = {  } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 339, .end = 342 } }, .args = {  } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 346, .end = 351 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 352, .end = 356 } }, ast.Node{ .number_literal = ast.Span{ .start = 357, .end = 358 } } } } }, .args = {  } } } } } } } } } } } 