ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 4, .end = 5 }, .typ = null, .value = ast.Node{ .bit_and = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 8, .end = 9 } }, .rhs = ast.Node{ .bit_xor = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 13, .end = 14 } }, .rhs = ast.Node{ .bit_or = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 18, .end = 19 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 22, .end = 23 } } } } } } } } } } ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 57, .end = 58 }, .typ = null, .value = ast.Node{ .bit_left = ast.BinaryOp{ .lhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 62, .end = 63 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 66, .end = 67 } } } }, .rhs = ast.Node{ .greater_than_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 73, .end = 74 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 78, .end = 79 } } } } } } } } ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 114, .end = 115 }, .typ = null, .value = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 118, .end = 119 } }, .rhs = ast.Node{ .greater_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 123, .end = 124 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 127, .end = 128 } } } } } } } } ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 157, .end = 158 }, .typ = null, .value = ast.Node{ .cmp_and = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 161, .end = 162 } }, .rhs = ast.Node{ .cmp_or = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 167, .end = 168 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 172, .end = 173 } } } } } } } } 