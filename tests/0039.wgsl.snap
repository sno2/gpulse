ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .typ = null, .value = ast.Node{ .bit_and = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 24, .end = 25 } }, .rhs = ast.Node{ .bit_xor = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 29, .end = 30 } }, .rhs = ast.Node{ .bit_or = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 34, .end = 35 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 38, .end = 39 } } } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 77, .end = 78 }, .typ = null, .value = ast.Node{ .bit_left = ast.BinaryOp{ .lhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 82, .end = 83 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 86, .end = 87 } } } }, .rhs = ast.Node{ .greater_than_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 93, .end = 94 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 98, .end = 99 } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 138, .end = 139 }, .typ = null, .value = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 142, .end = 143 } }, .rhs = ast.Node{ .greater_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 147, .end = 148 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 151, .end = 152 } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 185, .end = 186 }, .typ = null, .value = ast.Node{ .cmp_and = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 189, .end = 190 } }, .rhs = ast.Node{ .cmp_or = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 195, .end = 196 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 200, .end = 201 } } } } } } } } } } } 