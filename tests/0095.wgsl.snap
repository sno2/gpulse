ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 8 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 9, .end = 12 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 15, .end = 18 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 20, .end = 23 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 26, .end = 29 } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 34, .end = 37 } }, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 46, .end = 47 }, .typ = null, .value = ast.Node{ .div = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 50, .end = 53 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 56, .end = 59 } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .identifier = ast.Span{ .start = 70, .end = 71 } } } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.Span{ .start = 83, .end = 84 } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.Span{ .start = 95, .end = 96 } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 102, .end = 103 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 106, .end = 116 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 117, .end = 120 } } } } }, .value = null } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.Span{ .start = 130, .end = 131 } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.Span{ .start = 142, .end = 143 } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 149, .end = 150 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 153, .end = 160 } }, .value = null } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .fragment = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 176, .end = 180 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 190, .end = 198 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 200, .end = 203 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 206, .end = 210 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 211, .end = 214 } } } } } } } } } }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 225, .end = 228 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 231, .end = 236 } }, .args = { ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 237, .end = 240 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 241, .end = 242 } } } }, ast.Node{ .number_literal = ast.Span{ .start = 244, .end = 247 } } } } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 255, .end = 258 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 261, .end = 264 } } } }, .attributes = null, .scope = { ast.Node{ .phony = ast.Phony{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 275, .end = 288 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 289, .end = 290 } }, ast.Node{ .identifier = ast.Span{ .start = 292, .end = 293 } }, ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 295, .end = 298 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 299, .end = 301 } } } } } } } } } }, .next = null } } } } } } } 