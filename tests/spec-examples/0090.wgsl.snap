ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 7, .end = 8 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 19, .end = 20 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 26, .end = 27 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 30, .end = 40 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 41, .end = 44 } } } } }, .value = null } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 54, .end = 55 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 66, .end = 67 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 73, .end = 74 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 77, .end = 84 } }, .value = null } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .fragment = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 100, .end = 104 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 114, .end = 122 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 124, .end = 127 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 130, .end = 134 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 135, .end = 138 } } } } } } } } } }, .ret = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 149, .end = 152 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 153, .end = 154 } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 157, .end = 160 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, .attributes = null, .scope = { ast.Node{ .phony = ast.Phony{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 216, .end = 229 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 230, .end = 231 } }, ast.Node{ .identifier = ast.Span{ .start = 233, .end = 234 } }, ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 236, .end = 239 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 240, .end = 242 } } } } } } } } } }, .next = null } } } } } } }
