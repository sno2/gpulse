ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 23, .end = 26 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 29, .end = 30 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 54, .end = 55 } }, .op_idx = 56, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 59, .end = 60 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 63, .end = 68 } } }, .next = null } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .mod = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 83, .end = 84 } }, .op_idx = 85, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 87, .end = 88 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .op_idx = 89, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 92, .end = 93 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 96, .end = 104 } } }, .next = null } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 128, .end = 132 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 134, .end = 137 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 140, .end = 141 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .continuing = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 177, .end = 178 } }, .op_idx = 179, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 181, .end = 182 } }, .op_idx = 183, .rhs = ast.Node{ .identifier = ast.Span{ .start = 185, .end = 189 } } } } } } } } } } } } } } }
