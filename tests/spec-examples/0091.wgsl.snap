ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 7, .end = 8 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 19, .end = 20 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 47, .end = 48 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 51, .end = 54 } }, .value = null } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 63, .end = 64 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 75, .end = 76 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 91, .end = 92 }, .access_mode = null, .addr_space = ast.AddrSpace.uniform, .typ = ast.Node{ .identifier = ast.Span{ .start = 95, .end = 98 } }, .value = null } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 126, .end = 128 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 129, .end = 130 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .z = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 131, .end = 132 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 137, .end = 141 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 152, .end = 153 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 156, .end = 159 } }, .value = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 163, .end = 164 } }, .op_idx = 165, .rhs = ast.Node{ .identifier = ast.Span{ .start = 167, .end = 168 } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 175, .end = 176 } }, .op_idx = 177, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 179, .end = 180 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 225, .end = 241 } }, .args = {  } } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 251, .end = 252 } }, .op_idx = 253, .rhs = ast.Node{ .identifier = ast.Span{ .start = 255, .end = 256 } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 263, .end = 264 } }, .op_idx = 265, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 267, .end = 268 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 311, .end = 325 } }, .args = {  } } } }, .next = null } } } } } } }
