ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 7, .end = 8 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 19, .end = 20 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 47, .end = 62 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 65, .end = 68 } }, .value = null } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 74, .end = 92 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 93, .end = 96 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 98, .end = 102 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 103, .end = 106 } } } } } } } }, .ret = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 116, .end = 119 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 120, .end = 121 } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 124, .end = 129 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, .attributes = null, .scope = { ast.Node{ .discard = ast.Span{ .start = 295, .end = 302 } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 310, .end = 325 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 328, .end = 329 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .fragment = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 347, .end = 351 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 361, .end = 369 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 371, .end = 379 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 381, .end = 385 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 386, .end = 389 } } } } } } } } } }, .ret = ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 407, .end = 408 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 410, .end = 414 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 415, .end = 418 } } } } } } }, .scope = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 424, .end = 442 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 443, .end = 451 } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 571, .end = 586 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 589, .end = 590 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 601, .end = 605 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 606, .end = 609 } } } } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 611, .end = 614 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 616, .end = 619 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 621, .end = 624 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 626, .end = 629 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } } } } } } }
