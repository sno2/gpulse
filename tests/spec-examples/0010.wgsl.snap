ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 93, .end = 97 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 99, .end = 102 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 105, .end = 108 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 176, .end = 179 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 181, .end = 184 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 187, .end = 190 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 267, .end = 270 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 272, .end = 275 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 278, .end = 280 }, .kind = ast.NumberLiteral.NumberKind.u32 } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 410, .end = 417 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 418, .end = 421 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 423, .end = 426 } } } } }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 579, .end = 582 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 585, .end = 589 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 590, .end = 593 } } } } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 665, .end = 668 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 670, .end = 673 } }, .value = null } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 752, .end = 755 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 757, .end = 760 } }, .value = null } }, ast.Node{ .scope = ast.Scope{ .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 898, .end = 901 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 904, .end = 907 } }, .value = null } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1000, .end = 1003 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1005, .end = 1008 } }, .value = null } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1127, .end = 1130 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1132, .end = 1135 } }, .value = null } }, ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1221, .end = 1222 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1224, .end = 1227 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1230, .end = 1231 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1233, .end = 1234 } }, .op_idx = 1235, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1237, .end = 1239 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .op_idx = 1242, .value = ast.Node{ .identifier = ast.Span{ .start = 1241, .end = 1242 } } } }, .attributes = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1319, .end = 1320 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1322, .end = 1325 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1328, .end = 1329 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1409, .end = 1412 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1414, .end = 1417 } }, .value = null } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1522, .end = 1531 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1534, .end = 1537 } }, .value = ast.Node{ .identifier = ast.Span{ .start = 1540, .end = 1549 } } } } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1614, .end = 1617 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 1619, .end = 1622 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1625, .end = 1627 }, .kind = ast.NumberLiteral.NumberKind.u32 } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 1701, .end = 1708 }, .params = {  }, .ret = null, .scope = {  } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 1787, .end = 1793 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 1872, .end = 1878 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 1880, .end = 1883 } } } } }, .ret = null, .scope = {  } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1916, .end = 1925 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 1928, .end = 1931 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1934, .end = 1935 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
