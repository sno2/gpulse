ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 6 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 18, .end = 34 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 36, .end = 41 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 42, .end = 45 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 46, .end = 47 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .value = null } }, ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 59, .end = 60 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 63, .end = 67 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 68, .end = 71 } } } } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 73, .end = 74 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 75, .end = 76 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 92, .end = 93 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 95, .end = 98 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 101, .end = 102 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 104, .end = 105 } }, .op_idx = 106, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 108, .end = 109 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .op_idx = 113, .value = ast.Node{ .identifier = ast.Span{ .start = 112, .end = 113 } } } }, .attributes = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 310, .end = 317 }, .typ = null, .value = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 320, .end = 321 } }, .index = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 322, .end = 323 } }, .op_idx = 323, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 324, .end = 325 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 413, .end = 429 } }, .index = ast.Node{ .identifier = ast.Span{ .start = 430, .end = 431 } } } }, .op_idx = 433, .rhs = ast.Node{ .identifier = ast.Span{ .start = 435, .end = 442 } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 454, .end = 461 } }, .op_idx = 462, .rhs = ast.Node{ .identifier = ast.Span{ .start = 465, .end = 472 } } } }, .attributes = null, .scope = {  }, .next = null } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 528, .end = 535 } }, .op_idx = 536, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 538, .end = 539 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = {  }, .next = null } } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 761, .end = 776 } }, .index = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 777, .end = 778 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .op_idx = 780, .rhs = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 783, .end = 799 } }, .index = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 800, .end = 801 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, .attributes = null, .scope = {  }, .next = null } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 876, .end = 885 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 886, .end = 899 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 901, .end = 904 } } } } }, .ret = null, .scope = { ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 917, .end = 918 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 921, .end = 925 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 926, .end = 929 } } } } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 931, .end = 932 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 933, .end = 934 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 1117, .end = 1130 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 1132, .end = 1135 } }, .value = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 1138, .end = 1139 } }, .index = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1140, .end = 1153 } }, .op_idx = 1153, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1154, .end = 1155 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1165, .end = 1178 } }, .op_idx = 1179, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1182, .end = 1195 } } } }, .attributes = null, .scope = {  }, .next = null } } } } }
