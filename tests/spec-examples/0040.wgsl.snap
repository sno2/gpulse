ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 7, .end = 8 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 15, .end = 18 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 20, .end = 23 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 29, .end = 35 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 37, .end = 40 } } } } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 56, .end = 62 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 64, .end = 65 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 71, .end = 72 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 85, .end = 86 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 88, .end = 91 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 94, .end = 96 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 102, .end = 103 } }, .op_idx = 104, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 106, .end = 108 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 165, .end = 171 } }, .op_idx = 171, .rhs = ast.Node{ .identifier = ast.Span{ .start = 172, .end = 175 } } } }, .op_idx = 176, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 178, .end = 180 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 247, .end = 249 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 251, .end = 255 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 256, .end = 259 } } } } }, .value = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 266, .end = 268 } }, .op_idx = 268, .rhs = ast.Node{ .identifier = ast.Span{ .start = 269, .end = 270 } } } }, .op_idx = 271, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 273, .end = 277 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 340, .end = 348 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 350, .end = 353 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 354, .end = 362 } }, ast.Node{ .identifier = ast.Span{ .start = 363, .end = 366 } } } } }, .value = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 370, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 371, .end = 373 } }, .op_idx = 373, .rhs = ast.Node{ .identifier = ast.Span{ .start = 374, .end = 375 } } } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 381, .value = ast.Node{ .identifier = ast.Span{ .start = 382, .end = 390 } } } }, .op_idx = 391, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 393, .end = 396 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 453, .end = 460 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 462, .end = 463 } }, .value = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 548, .end = 555 } }, .op_idx = 556, .rhs = ast.Node{ .identifier = ast.Span{ .start = 558, .end = 564 } } } } } } }
