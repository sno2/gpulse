ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 17 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 24, .end = 27 } }, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 36, .end = 37 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 39, .end = 42 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 45, .end = 46 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 53, .end = 54 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 58, .end = 60 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .identifier = ast.Span{ .start = 74, .end = 75 } } } } }, .next = null } } } } }
