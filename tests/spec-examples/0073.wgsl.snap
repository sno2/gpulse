ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 13, .end = 14 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 17, .end = 20 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 23, .end = 24 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 30, .end = 32 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 33, .end = 35 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 38, .end = 41 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 42, .end = 50 } }, ast.Node{ .identifier = ast.Span{ .start = 52, .end = 55 } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 58, .end = 60 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 63, .end = 66 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 67, .end = 75 } }, ast.Node{ .identifier = ast.Span{ .start = 77, .end = 80 } } } } } } } }, .ret = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 88, .end = 90 } } } }, .rhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 94, .end = 96 } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 104, .end = 106 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 107, .end = 109 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 112, .end = 115 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 116, .end = 124 } }, ast.Node{ .identifier = ast.Span{ .start = 126, .end = 129 } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 132, .end = 134 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 137, .end = 140 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 141, .end = 149 } }, ast.Node{ .identifier = ast.Span{ .start = 151, .end = 154 } } } } } } } }, .ret = null, .scope = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 161, .end = 163 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 164, .end = 166 } }, ast.Node{ .identifier = ast.Span{ .start = 168, .end = 170 } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 179, .end = 181 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 192, .end = 193 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 196, .end = 199 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 202, .end = 203 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 207, .end = 209 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 211, .end = 212 } } } }, ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 215, .end = 216 } } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 393, .end = 395 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 396, .end = 398 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 401, .end = 404 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 405, .end = 413 } }, ast.Node{ .identifier = ast.Span{ .start = 415, .end = 418 } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 421, .end = 423 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 426, .end = 429 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 430, .end = 438 } }, ast.Node{ .identifier = ast.Span{ .start = 440, .end = 443 } } } } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 449, .end = 452 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 465, .end = 467 } } } }, .rhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 471, .end = 473 } } } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 481, .end = 483 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 494, .end = 495 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 498, .end = 501 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 504, .end = 505 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 513, .end = 514 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 517, .end = 519 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 521, .end = 522 } } } }, ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 525, .end = 526 } } } } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 581, .end = 583 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 584, .end = 585 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 588, .end = 591 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 592, .end = 599 } }, ast.Node{ .identifier = ast.Span{ .start = 601, .end = 604 } } } } } } } }, .ret = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 611, .end = 612 } }, .rhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 616, .end = 617 } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 625, .end = 627 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 628, .end = 629 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 632, .end = 635 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 636, .end = 643 } }, ast.Node{ .identifier = ast.Span{ .start = 645, .end = 648 } } } } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 654, .end = 657 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 669, .end = 670 } }, .rhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 674, .end = 675 } } } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 683, .end = 685 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 696, .end = 697 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 700, .end = 702 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 704, .end = 705 } } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 806, .end = 807 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 810, .end = 812 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 814, .end = 815 } } } } } } } } } } } }
