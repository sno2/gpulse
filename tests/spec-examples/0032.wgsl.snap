ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 23, .end = 26 } }, .value = null } }, ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 106, .end = 111 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 113, .end = 116 } }, .value = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 119, .end = 120 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 123, .end = 124 } } } } } }, ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 168, .end = 169 } } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 184, .end = 185 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 189, .end = 190 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 193, .end = 198 } } }, .next = null } } } } } } } }
