ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 13, .end = 14 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 16, .end = 19 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 24, .end = 30 }, .params = {  }, .ret = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 36, .end = 40 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 41, .end = 44 } } } } }, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 134, .end = 135 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 138, .end = 141 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, .attributes = { ast.Attribute{ .diagnostic = ast.DiagnosticControl{ .severity = ast.SeverityControlName.off, .rule_namespace = ast.Span{ .start = 1, .end = 0 }, .rule_name = ast.Span{ .start = 159, .end = 180 } } } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 195, .end = 208 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 209, .end = 210 } }, ast.Node{ .identifier = ast.Span{ .start = 211, .end = 212 } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 213, .end = 217 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 218, .end = 219 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 220, .end = 221 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } }, .next = null } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 238, .end = 242 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 243, .end = 246 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } } } } }
