ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 4, .end = 5 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 7, .end = 10 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 13, .end = 14 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 25, .end = 26 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 28, .end = 31 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 34, .end = 35 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 37, .end = 38 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 41, .end = 42 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 44, .end = 45 } } } }, .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 56, .end = 57 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 61, .end = 62 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 69, .end = 77 } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 85, .end = 86 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 89, .end = 90 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 93, .end = 94 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
