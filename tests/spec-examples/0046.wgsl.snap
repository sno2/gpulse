ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 22, .end = 23 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 26, .end = 27 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 37, .end = 38 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 40, .end = 43 } }, .value = null } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 53, .end = 54 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 56, .end = 59 } }, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 62, .end = 75 } }, .args = {  } } } } }, ast.Node{ .switch_stmt = ast.Switch{ .expression = ast.Node{ .identifier = ast.Span{ .start = 90, .end = 91 } }, .attributes = null, .clauses = { ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 103, .end = 104 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 120, .end = 121 } }, .op_idx = 122, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 124, .end = 125 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 146, .end = 147 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .identifier = ast.Span{ .start = 149, .end = 150 } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 221, .end = 222 } }, .op_idx = 223, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 225, .end = 226 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 243, .end = 244 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .default_selector = ast.Span{ .start = 246, .end = 253 } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 322, .end = 323 } }, .op_idx = 324, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 326, .end = 327 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } } }
