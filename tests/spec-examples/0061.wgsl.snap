ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 13 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 24, .end = 25 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 27, .end = 30 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 33, .end = 34 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 152, .end = 153 } }, .op_idx = 154, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 157, .end = 158 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 167, .end = 172 } } }, .next = ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 214, .end = 215 } }, .op_idx = 216, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 219, .end = 221 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 230, .end = 238 } } }, .next = ast.Node{ .else_stmt = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .ret = ast.Ret{ .value = null } } } } } } } } } } } } } } }
