ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 13, .end = 20 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 22, .end = 25 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 31, .end = 59 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 65, .end = 68 } }, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 77, .end = 85 }, .typ = null, .value = ast.Node{ .identifier = ast.Span{ .start = 88, .end = 95 } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 99, .end = 106 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 109, .end = 116 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 119, .end = 120 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .identifier = ast.Span{ .start = 131, .end = 139 } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 147, .end = 151 }, .params = {  }, .ret = null, .scope = { ast.Node{ .phony = ast.Phony{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 218, .end = 246 } }, .args = {  } } } } } } } }
