ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 23, .end = 26 } }, .value = null } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 36, .end = 37 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 39, .end = 42 } }, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 45, .end = 58 } }, .args = {  } } } } }, ast.Node{ .switch_stmt = ast.Switch{ .expression = ast.Node{ .identifier = ast.Span{ .start = 73, .end = 74 } }, .attributes = null, .clauses = { ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 86, .end = 87 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 133, .end = 134 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 137, .end = 138 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.SwitchClause{ .default = ast.SwitchClause.Default{ .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 213, .end = 214 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 217, .end = 218 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 235, .end = 236 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 238, .end = 239 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 297, .end = 298 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 301, .end = 302 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 319, .end = 320 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 375, .end = 376 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 379, .end = 380 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.SwitchClause{ .case = ast.SwitchClause.Case{ .selectors = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 397, .end = 398 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 413, .end = 414 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 417, .end = 418 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } } }
