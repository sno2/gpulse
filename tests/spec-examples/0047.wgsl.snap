ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 23, .end = 26 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 29, .end = 30 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 40, .end = 41 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 43, .end = 46 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 49, .end = 50 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 86, .end = 87 } }, .op_idx = 88, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 91, .end = 92 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 95, .end = 100 } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 113, .end = 114 } }, .op_idx = 115, .rhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 117, .end = 118 } }, .op_idx = 119, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 121, .end = 122 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .inc = ast.UnaryOp{ .op_idx = 134, .value = ast.Node{ .identifier = ast.Span{ .start = 133, .end = 134 } } } } } } } } } }
