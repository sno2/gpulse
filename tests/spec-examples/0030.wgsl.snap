ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .id = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 4, .end = 5 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 19, .end = 34 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 36, .end = 40 } }, .value = ast.Node{ .boolean_literal = ast.BooleanLiteral{ .span = ast.Span{ .start = 43, .end = 47 }, .value = true } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .id = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 77, .end = 81 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 92, .end = 106 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 108, .end = 111 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 114, .end = 117 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .id = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 146, .end = 150 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 161, .end = 165 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 167, .end = 170 } }, .value = null } } } }
ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 233, .end = 238 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 240, .end = 243 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 246, .end = 249 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }
ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 390, .end = 395 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 397, .end = 400 } }, .value = null } }
ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 620, .end = 626 }, .typ = null, .value = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 629, .end = 630 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 633, .end = 638 } } } } } }
