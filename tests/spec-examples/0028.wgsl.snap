ast.Node{ .type_alias = ast.TypeAlias{ .name = ast.Span{ .start = 6, .end = 9 }, .value = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 12, .end = 17 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 18, .end = 21 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 23, .end = 24 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .type_alias = ast.TypeAlias{ .name = ast.Span{ .start = 34, .end = 39 }, .value = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 42, .end = 47 }, .args = { ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 48, .end = 52 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 53, .end = 56 } } } } } } } } } }
ast.Node{ .type_alias = ast.TypeAlias{ .name = ast.Span{ .start = 67, .end = 73 }, .value = ast.Node{ .identifier = ast.Span{ .start = 76, .end = 79 } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 119, .end = 128 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 130, .end = 136 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 139, .end = 145 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 150, .end = 156 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 162, .end = 168 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 180, .end = 186 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 187, .end = 188 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .op_idx = 190, .rhs = ast.Node{ .identifier = ast.Span{ .start = 192, .end = 201 } } } } } } } } }
