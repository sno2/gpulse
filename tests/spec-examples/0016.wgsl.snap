ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 9, .end = 18 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 21, .end = 23 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 41, .end = 45 }, .access_mode = null, .addr_space = ast.AddrSpace.workgroup, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 47, .end = 52 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 53, .end = 56 } }, ast.Node{ .identifier = ast.Span{ .start = 57, .end = 66 } } } } }, .value = null } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 84, .end = 89 }, .access_mode = null, .addr_space = ast.AddrSpace.workgroup, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 91, .end = 96 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 97, .end = 100 } }, ast.Node{ .identifier = ast.Span{ .start = 101, .end = 110 } } } } }, .value = null } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 260, .end = 267 }, .access_mode = null, .addr_space = ast.AddrSpace.workgroup, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 269, .end = 274 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 275, .end = 278 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 279, .end = 281 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .value = null } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 364, .end = 371 }, .access_mode = null, .addr_space = ast.AddrSpace.workgroup, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 373, .end = 378 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 379, .end = 382 } }, ast.Node{ .paren = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 384, .end = 393 } }, .op_idx = 394, .rhs = ast.Node{ .div = ast.BinaryOp{ .lhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 396, .end = 397 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .op_idx = 398, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 400, .end = 401 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } }, .value = null } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 481, .end = 488 }, .access_mode = null, .addr_space = ast.AddrSpace.workgroup, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 490, .end = 495 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 496, .end = 499 } }, ast.Node{ .paren = ast.Node{ .identifier = ast.Span{ .start = 501, .end = 510 } } } } } }, .value = null } }
