ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 6, .end = 15 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 18, .end = 33 } }, .args = { ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 34, .end = 38 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 41, .end = 45 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .id = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 307, .end = 308 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 319, .end = 320 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 323, .end = 326 } }, .value = null } } } }
ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 337, .end = 338 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 341, .end = 356 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 357, .end = 358 } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 593, .end = 596 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 607, .end = 608 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 611, .end = 616 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 617, .end = 620 } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 622, .end = 637 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 638, .end = 641 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } }, .value = null } } } } }
