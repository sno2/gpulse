ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 6 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 7, .end = 8 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 11, .end = 14 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 15, .end = 23 } }, ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 25, .end = 30 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 31, .end = 34 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 36, .end = 37 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 41, .end = 42 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 45, .end = 48 } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 53, .end = 56 } }, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 65, .end = 67 }, .typ = null, .value = ast.Node{ .identifier = ast.Span{ .start = 70, .end = 71 } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 79, .end = 80 }, .access_mode = null, .addr_space = null, .typ = null, .value = ast.Node{ .identifier = ast.Span{ .start = 83, .end = 84 } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 92, .end = 94 }, .typ = null, .value = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 97, .value = ast.Node{ .paren = ast.Node{ .index = ast.Index{ .root = ast.Node{ .paren = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 100, .value = ast.Node{ .identifier = ast.Span{ .start = 101, .end = 103 } } } } }, .index = ast.Node{ .identifier = ast.Span{ .start = 105, .end = 106 } } } } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 112, .end = 113 } }, .op_idx = 114, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 116, .end = 117 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 121, .value = ast.Node{ .identifier = ast.Span{ .start = 122, .end = 124 } } } }, .op_idx = 125, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 127, .end = 128 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .index = ast.Index{ .root = ast.Node{ .paren = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 140, .value = ast.Node{ .identifier = ast.Span{ .start = 141, .end = 143 } } } } }, .index = ast.Node{ .identifier = ast.Span{ .start = 145, .end = 146 } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 214, .end = 230 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 231, .end = 232 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 235, .end = 238 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 239, .end = 247 } }, ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 249, .end = 254 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 255, .end = 258 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 260, .end = 261 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 265, .end = 266 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 269, .end = 272 } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 277, .end = 280 } }, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 289, .end = 294 }, .access_mode = null, .addr_space = null, .typ = null, .value = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 297, .value = ast.Node{ .identifier = ast.Span{ .start = 298, .end = 299 } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 347, .end = 349 }, .typ = null, .value = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 352, .value = ast.Node{ .identifier = ast.Span{ .start = 353, .end = 358 } } } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 403, .end = 404 }, .access_mode = null, .addr_space = null, .typ = null, .value = ast.Node{ .identifier = ast.Span{ .start = 407, .end = 408 } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 416, .end = 422 }, .typ = null, .value = ast.Node{ .identifier = ast.Span{ .start = 425, .end = 426 } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 467, .end = 469 }, .typ = null, .value = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 472, .value = ast.Node{ .paren = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 474, .end = 479 } }, .index = ast.Node{ .identifier = ast.Span{ .start = 480, .end = 486 } } } } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 525, .end = 526 } }, .op_idx = 527, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 529, .end = 530 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 534, .value = ast.Node{ .paren = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 536, .value = ast.Node{ .paren = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 538, .end = 543 } }, .index = ast.Node{ .identifier = ast.Span{ .start = 544, .end = 550 } } } } } } } } } }, .op_idx = 554, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 556, .end = 557 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .index = ast.Index{ .root = ast.Node{ .paren = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 604, .value = ast.Node{ .paren = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 606, .value = ast.Node{ .identifier = ast.Span{ .start = 607, .end = 612 } } } } } } } }, .index = ast.Node{ .identifier = ast.Span{ .start = 615, .end = 616 } } } } } } } } }
