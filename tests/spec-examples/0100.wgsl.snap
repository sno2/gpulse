ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 7 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 43, .end = 58 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 61, .end = 65 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 66, .end = 69 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 107, .end = 117 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 120, .end = 124 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 125, .end = 128 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } }, .op_idx = 129, .rhs = ast.Node{ .identifier = ast.Span{ .start = 130, .end = 135 } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 172, .end = 182 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 185, .end = 189 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 190, .end = 193 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } }, .op_idx = 194, .rhs = ast.Node{ .identifier = ast.Span{ .start = 195, .end = 200 } } } } } } } } }
