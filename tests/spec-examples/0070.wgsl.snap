ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 152, .end = 159 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 160, .end = 161 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 163, .end = 166 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 168, .end = 169 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 171, .end = 174 } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 179, .end = 182 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 194, .end = 195 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 198, .end = 199 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 470, .end = 471 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 476, .end = 480 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 492, .end = 495 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 497, .end = 500 } }, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 503, .end = 510 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 511, .end = 512 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 514, .end = 517 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } } } } } } }
