ast.Node{ .diagnostic_directive = ast.DiagnosticControl{ .severity = ast.SeverityControlName.off, .rule_namespace = ast.Span{ .start = 1, .end = 0 }, .rule_name = ast.Span{ .start = 15, .end = 36 } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 52, .end = 53 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 55, .end = 58 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 63, .end = 69 }, .params = {  }, .ret = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 75, .end = 79 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 80, .end = 83 } } } } }, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .paren = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 93, .end = 94 } }, .op_idx = 95, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 97, .end = 100 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } }, .attributes = null, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 216, .end = 229 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 230, .end = 231 } }, ast.Node{ .identifier = ast.Span{ .start = 232, .end = 233 } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 234, .end = 238 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 239, .end = 240 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 241, .end = 242 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } }, .next = ast.Node{ .else_stmt = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .diagnostic = ast.DiagnosticControl{ .severity = ast.SeverityControlName.warning, .rule_namespace = ast.Span{ .start = 1, .end = 0 }, .rule_name = ast.Span{ .start = 355, .end = 376 } } } }, .inner = ast.Node{ .scope = ast.Scope{ .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 393, .end = 406 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 407, .end = 408 } }, ast.Node{ .identifier = ast.Span{ .start = 409, .end = 410 } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 411, .end = 415 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 416, .end = 417 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 418, .end = 419 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } } } } } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 442, .end = 446 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 447, .end = 450 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } } } } }
