ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 120, .end = 130 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 135, .end = 143 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 146, .end = 151 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 155, .end = 160 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 163, .end = 168 } } } } } } }
ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 180, .end = 192 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 197, .end = 207 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 210, .end = 213 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 217, .end = 222 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 225, .end = 230 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 231, .end = 241 } } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 253, .end = 254 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 265, .end = 266 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 281, .end = 287 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 290, .end = 302 } }, .value = null } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 324, .end = 325 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.private, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 328, .end = 330 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 364, .end = 365 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 376, .end = 377 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 383, .end = 399 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 402, .end = 409 } }, .value = null } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 418, .end = 419 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 430, .end = 431 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 437, .end = 453 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 456, .end = 466 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 467, .end = 470 } } } } }, .value = null } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .fragment = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 544, .end = 556 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 567, .end = 568 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 570, .end = 578 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 581, .end = 586 } } } } } }, ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 614, .end = 615 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 617, .end = 623 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 626, .end = 631 } } } } } }, ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 659, .end = 660 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 662, .end = 664 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 667, .end = 672 } } } } } } }, .ret = ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 687, .end = 688 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .identifier = ast.Span{ .start = 690, .end = 695 } } } }, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 762, .end = 771 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 774, .end = 787 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 788, .end = 804 } }, ast.Node{ .identifier = ast.Span{ .start = 806, .end = 822 } }, ast.Node{ .identifier = ast.Span{ .start = 824, .end = 826 } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 836, .end = 837 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 840, .end = 849 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 850, .end = 856 } } } } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 865, .end = 877 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 880, .end = 885 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 886, .end = 887 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 941, .end = 942 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 945, .end = 947 }, .kind = ast.NumberLiteral.NumberKind.u32 } } } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 949, .end = 950 } }, .rhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 953, .end = 959 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 960, .end = 970 } } } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 972, .end = 973 } } } }, .attributes = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 987, .end = 999 }, .typ = null, .value = ast.Node{ .sub = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1002, .end = 1008 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1009, .end = 1014 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1015, .end = 1016 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1018, .end = 1026 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1029, .end = 1037 } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 1047, .end = 1051 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 1054, .end = 1060 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 1061, .end = 1073 } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 1084, .end = 1087 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 1090, .end = 1099 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 1100, .end = 1112 } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 1194, .end = 1202 }, .typ = null, .value = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1205, .end = 1211 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1212, .end = 1217 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1218, .end = 1219 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1221, .end = 1226 } } } }, .rhs = ast.Node{ .div = ast.BinaryOp{ .lhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1230, .end = 1231 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .rhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 1234, .end = 1237 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 1238, .end = 1242 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1244, .end = 1245 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 1257, .end = 1262 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 1265, .end = 1268 } }, .args = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 1269, .end = 1272 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 1273, .end = 1274 } }, ast.Node{ .identifier = ast.Span{ .start = 1276, .end = 1279 } } } } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1282, .end = 1283 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .add_assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1350, .end = 1362 } }, .rhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1366, .end = 1375 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1376, .end = 1379 } } } }, .rhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1382, .end = 1390 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1393, .end = 1398 } } } } } } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 1457, .end = 1461 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 1462, .end = 1474 } }, ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 1476, .end = 1485 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 1486, .end = 1487 } } } } } } } } } } } } } }
