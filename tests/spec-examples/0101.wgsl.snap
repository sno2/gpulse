ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 28, .end = 43 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 46, .end = 50 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 51, .end = 54 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 89, .end = 99 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 102, .end = 106 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 107, .end = 110 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } }, .op_idx = 111, .rhs = ast.Node{ .identifier = ast.Span{ .start = 112, .end = 117 } } } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 151, .end = 161 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 164, .end = 168 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 169, .end = 172 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } }, .op_idx = 173, .rhs = ast.Node{ .identifier = ast.Span{ .start = 174, .end = 179 } } } } } }
