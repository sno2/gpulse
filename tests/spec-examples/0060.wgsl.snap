ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 13 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 24, .end = 25 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 27, .end = 30 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 33, .end = 34 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 52, .end = 53 } }, .op_idx = 54, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 57, .end = 58 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 67, .end = 72 } } }, .next = ast.Node{ .else_stmt = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 119, .end = 127 } } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 243, .end = 244 } }, .op_idx = 245, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 247, .end = 248 } }, .op_idx = 249, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 251, .end = 252 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } }
