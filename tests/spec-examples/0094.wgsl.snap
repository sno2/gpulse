ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 25, .end = 27 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 28, .end = 29 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .z = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 30, .end = 31 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 36, .end = 40 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 50, .end = 72 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 74, .end = 77 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 80, .end = 83 } } } } } } }, .ret = null, .scope = { ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 98, .end = 99 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 102, .end = 104 }, .kind = ast.NumberLiteral.NumberKind.u32 } } } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 106, .end = 107 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 110, .end = 112 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 114, .end = 115 } } } }, .attributes = null, .scope = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 125, .end = 141 } }, .args = {  } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than = ast.BinaryOp{ .lhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 153, .end = 156 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 159, .end = 160 } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 164, .end = 165 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 174, .end = 179 } } }, .next = null } } } } } } } } } }
