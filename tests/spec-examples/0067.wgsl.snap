ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 28 }, .params = {  }, .ret = null, .scope = { ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 44, .end = 45 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 47, .end = 50 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 53, .end = 54 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 56, .end = 57 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 60, .end = 61 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 63, .end = 64 } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 75, .end = 83 } } } } } } } }
