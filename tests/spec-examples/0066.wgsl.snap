ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 37 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 48, .end = 49 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 51, .end = 54 } }, .value = null } }, ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 72, .end = 73 } }, .op_idx = 74, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 77, .end = 78 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 81, .end = 86 } } }, .next = null } }, ast.Node{ .cont = ast.Span{ .start = 94, .end = 102 } }, ast.Node{ .continuing = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 191, .end = 192 } }, .op_idx = 193, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 195, .end = 196 } }, .op_idx = 197, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 199, .end = 200 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } } } } }
