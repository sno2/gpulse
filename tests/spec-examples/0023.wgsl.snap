ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 13, .end = 16 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 18, .end = 21 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 26, .end = 33 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 39, .end = 42 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .identifier = ast.Span{ .start = 574, .end = 577 } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 585, .end = 591 }, .params = {  }, .ret = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 598, .end = 601 } }, .op_idx = 602, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 604, .end = 606 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 668, .end = 676 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 678, .end = 681 } }, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 684, .end = 691 } }, .args = {  } } } } } } } }
