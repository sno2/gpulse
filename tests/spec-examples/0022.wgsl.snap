ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 25, .end = 26 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 31, .end = 35 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 160, .end = 161 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 163, .end = 166 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 169, .end = 170 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 452, .end = 455 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 457, .end = 460 } }, .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 463, .end = 464 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 467, .end = 468 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 556, .end = 557 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 560, .end = 563 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 566, .end = 567 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 741, .end = 742 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 745, .end = 746 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 749, .end = 750 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } }
