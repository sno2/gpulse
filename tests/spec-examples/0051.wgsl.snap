ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 4, .end = 5 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 7, .end = 10 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 13, .end = 14 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .scope = ast.Scope{ .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 67, .end = 68 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 70, .end = 73 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 76, .end = 77 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .not = ast.UnaryOp{ .value = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 97, .end = 98 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 101, .end = 102 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 112, .end = 117 } } }, .next = null } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 133, .end = 134 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 138, .end = 139 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 148, .end = 156 } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 168, .end = 169 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 172, .end = 173 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 176, .end = 177 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .continuing = ast.CompoundStatement{ .attributes = null, .scope = { ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 203, .end = 204 } } } } } } } } } } } } }
