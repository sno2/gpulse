ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 6, .end = 7 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 10, .end = 11 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 19, .end = 20 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 23, .end = 24 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_assert = ast.ConstAssert{ .value = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 39, .end = 40 } }, .op_idx = 41, .rhs = ast.Node{ .identifier = ast.Span{ .start = 43, .end = 44 } } } } } }
ast.Node{ .const_assert = ast.ConstAssert{ .value = ast.Node{ .paren = ast.Node{ .not_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 85, .end = 86 } }, .op_idx = 87, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 90, .end = 91 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 127, .end = 130 }, .params = {  }, .ret = null, .scope = { ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 143, .end = 144 }, .typ = null, .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 147, .end = 148 } }, .op_idx = 149, .rhs = ast.Node{ .sub = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 151, .end = 152 } }, .op_idx = 153, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 155, .end = 156 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } }, ast.Node{ .const_assert = ast.ConstAssert{ .value = ast.Node{ .greater_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 173, .end = 174 } }, .op_idx = 175, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 177, .end = 178 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 209, .end = 210 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 214, .end = 215 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .const_assert = ast.ConstAssert{ .value = ast.Node{ .not_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 232, .end = 233 } }, .op_idx = 234, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 237, .end = 238 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
