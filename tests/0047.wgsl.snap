ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 4, .end = 5 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 7, .end = 10 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 13, .end = 14 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 20, .end = 21 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 23, .end = 26 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 29, .end = 30 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } ast.Node{ .loop = ast.Loop{ .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .greater_than_equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 56, .end = 57 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 61, .end = 62 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 65, .end = 70 } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 77, .end = 78 } }, .rhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 81, .end = 82 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 85, .end = 86 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 91, .end = 92 } } } } } } } 