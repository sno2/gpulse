ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 27, .end = 38 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 41, .end = 42 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_assert = ast.ConstAssert{ .value = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .paren = ast.Node{ .bit_and = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 118, .end = 129 } }, .op_idx = 130, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 132, .end = 133 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .op_idx = 135, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 138, .end = 139 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }
ast.Node{ .type_alias = ast.TypeAlias{ .name = ast.Span{ .start = 192, .end = 200 }, .value = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 203, .end = 208 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 209, .end = 212 } }, ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 214, .end = 225 } }, .op_idx = 225, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 226, .end = 227 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .identifier = ast.Span{ .start = 330, .end = 341 } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 346, .end = 358 }, .params = {  }, .ret = null, .scope = {  } } } } }
ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 432, .end = 443 }, .members = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .identifier = ast.Span{ .start = 460, .end = 471 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 473, .end = 482 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 485, .end = 490 } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .vertex = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 507, .end = 518 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 519, .end = 524 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 527, .end = 538 } } } } }, .ret = ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 552, .end = 560 } } } }, .inner = ast.Node{ .identifier = ast.Span{ .start = 562, .end = 567 } } } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 581, .end = 586 } }, .args = {  } } } } } } } } } }
