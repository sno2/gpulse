ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 15, .end = 23 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.workgroup, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 25, .end = 31 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 32, .end = 35 } } } } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 42, .end = 61 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 67, .end = 70 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 82, .end = 92 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 94, .end = 102 } } } } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 110, .end = 119 }, .params = {  }, .ret = null, .scope = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 126, .end = 137 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 139, .end = 147 } } } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 149, .end = 150 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } }
ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 163, .end = 168 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 173, .end = 183 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 185, .end = 191 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 192, .end = 195 } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 200, .end = 211 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 213, .end = 219 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 220, .end = 223 } } } } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 228, .end = 233 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 235, .end = 240 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 241, .end = 244 } } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 256, .end = 257 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 268, .end = 269 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 295, .end = 299 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 301, .end = 306 } }, .value = null } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 384, .end = 390 }, .params = {  }, .ret = null, .scope = {  } } }
