ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 11 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 17, .end = 20 } }, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 29, .end = 36 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 39, .end = 41 }, .kind = ast.NumberLiteral.NumberKind.u32 } } } }, ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 85, .end = 86 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 89, .end = 90 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 92, .end = 93 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 96, .end = 98 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 100, .end = 101 } } } }, .attributes = null, .scope = { ast.Node{ .add_assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 111, .end = 118 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 122, .end = 123 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 191, .end = 195 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = null, .value = ast.Node{ .boolean_literal = ast.BooleanLiteral{ .span = ast.Span{ .start = 198, .end = 203 }, .value = false } } } }, ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 213, .end = 214 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 217, .end = 218 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .for_stmt = ast.For{ .init = null, .condition = null, .update = null, .attributes = null, .scope = { ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .equal = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 240, .end = 241 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 245, .end = 246 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .cont = ast.Span{ .start = 302, .end = 310 } } }, .next = null } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .identifier = ast.Span{ .start = 325, .end = 329 } }, .attributes = null, .scope = { ast.Node{ .brk = ast.Span{ .start = 373, .end = 378 } } }, .next = null } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 390, .end = 394 } }, .rhs = ast.Node{ .boolean_literal = ast.BooleanLiteral{ .span = ast.Span{ .start = 397, .end = 401 }, .value = true } } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .identifier = ast.Span{ .start = 417, .end = 424 } } } } } } }
