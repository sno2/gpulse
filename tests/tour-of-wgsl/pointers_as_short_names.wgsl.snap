ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 7, .end = 15 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 21, .end = 29 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 31, .end = 36 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 41, .end = 44 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 46, .end = 51 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 56, .end = 64 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 66, .end = 71 } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 82, .end = 83 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 94, .end = 95 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 121, .end = 130 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 132, .end = 137 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 138, .end = 146 } } } } }, .value = null } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 153, .end = 180 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 191, .end = 204 }, .typ = null, .value = ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 208, .end = 217 } } } } } }, ast.Node{ .for_stmt = ast.For{ .init = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 252, .end = 253 }, .access_mode = ast.AccessMode.read_write, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 255, .end = 258 } }, .value = null } }, .condition = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 260, .end = 261 } }, .rhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 264, .end = 275 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 276, .end = 289 } } } } } } }, .update = ast.Node{ .inc = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 292, .end = 293 } } } }, .attributes = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 390, .end = 400 }, .typ = null, .value = ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 404, .end = 413 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 414, .end = 415 } } } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 605, .end = 612 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 617, .end = 627 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 629, .end = 632 } } } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 672, .end = 684 }, .typ = null, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 689, .end = 699 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 701, .end = 709 } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 717, .end = 727 } } } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 729, .end = 737 } } } }, .rhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 740, .end = 747 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 750, .end = 762 } } } } } } } } } } } }
