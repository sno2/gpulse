ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 13 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 19, .end = 22 } }, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 31, .end = 38 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 40, .end = 43 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 46, .end = 47 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .while_stmt = ast.While{ .expression = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 58, .end = 65 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 68, .end = 69 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 109, .end = 116 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 119, .end = 126 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 129, .end = 130 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .identifier = ast.Span{ .start = 146, .end = 153 } } } } } } }
