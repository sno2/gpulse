ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 25, .end = 27 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 32, .end = 57 }, .params = {  }, .ret = null, .scope = {  } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .vertex = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 76, .end = 94 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 104, .end = 116 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 118, .end = 121 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 124, .end = 127 } } } } } } }, .ret = ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 141, .end = 149 } } } }, .inner = ast.Node{ .identifier = ast.Span{ .start = 151, .end = 156 } } } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 170, .end = 175 } }, .args = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 176, .end = 179 } }, .args = { ast.Node{ .sub = ast.BinaryOp{ .lhs = ast.Node{ .mod = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 180, .end = 183 } }, .op_idx = 183, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 184, .end = 185 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .op_idx = 185, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 186, .end = 187 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 190, .end = 193 } }, .args = { ast.Node{ .sub = ast.BinaryOp{ .lhs = ast.Node{ .div = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 194, .end = 197 } }, .op_idx = 197, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 198, .end = 199 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .op_idx = 199, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 200, .end = 201 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 204, .end = 205 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 207, .end = 208 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .fragment = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 227, .end = 240 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 250, .end = 258 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 260, .end = 263 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 266, .end = 271 } } } } } } }, .ret = ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 286, .end = 287 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .identifier = ast.Span{ .start = 289, .end = 294 } } } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 308, .end = 312 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 313, .end = 314 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 316, .end = 317 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 319, .end = 320 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 322, .end = 323 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 354, .end = 356 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 361, .end = 388 }, .params = {  }, .ret = null, .scope = {  } } } } }
