ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 6, .end = 16 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 19, .end = 24 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 25, .end = 28 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 30, .end = 31 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 33, .end = 34 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 35, .end = 36 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 37, .end = 38 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 39, .end = 40 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 41, .end = 42 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 43, .end = 44 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 45, .end = 47 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 57, .end = 58 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 61, .end = 62 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 70, .end = 77 }, .typ = null, .value = ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 80, .end = 90 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 91, .end = 92 } } } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 219, .end = 224 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 227, .end = 228 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 236, .end = 245 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 247, .end = 252 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 253, .end = 256 } }, ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 258, .end = 259 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 262, .end = 267 } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 270, .end = 271 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, .value = ast.Node{ .identifier = ast.Span{ .start = 275, .end = 285 } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 357, .end = 372 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 375, .end = 380 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 381, .end = 384 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 386, .end = 387 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .args = {  } } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 398, .end = 406 }, .typ = null, .value = ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 409, .end = 424 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 425, .end = 426 } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 480, .end = 492 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 493, .end = 494 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 496, .end = 499 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 501, .end = 502 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 504, .end = 507 } } } } }, .ret = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 512, .end = 517 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 518, .end = 521 } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 522, .end = 523 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 603, .end = 608 } }, .args = { ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 609, .end = 619 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 620, .end = 621 } } } }, ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 624, .end = 634 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 635, .end = 636 } } } } } } } } } } } }
