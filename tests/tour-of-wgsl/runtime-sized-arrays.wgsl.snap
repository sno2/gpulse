ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 61, .end = 62 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 73, .end = 74 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 89, .end = 96 }, .access_mode = null, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 98, .end = 103 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 104, .end = 107 } } } } }, .value = null } } } }
ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 216, .end = 226 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 229, .end = 237 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 239, .end = 244 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 246, .end = 251 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 253, .end = 258 } } } } } } }
ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 269, .end = 278 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 283, .end = 296 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 298, .end = 301 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 305, .end = 310 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 312, .end = 317 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 318, .end = 328 } } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 340, .end = 341 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 352, .end = 353 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 368, .end = 374 }, .access_mode = null, .addr_space = ast.AddrSpace.storage, .typ = ast.Node{ .identifier = ast.Span{ .start = 376, .end = 385 } }, .value = null } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 391, .end = 407 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 413, .end = 416 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 428, .end = 439 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .op_idx = 440, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 441, .end = 447 } }, .op_idx = 447, .rhs = ast.Node{ .identifier = ast.Span{ .start = 448, .end = 453 } } } } } } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 462, .end = 481 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 482, .end = 483 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 485, .end = 488 } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 493, .end = 503 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 515, .end = 521 } }, .op_idx = 521, .rhs = ast.Node{ .index = ast.Index{ .root = ast.Node{ .identifier = ast.Span{ .start = 522, .end = 527 } }, .index = ast.Node{ .identifier = ast.Span{ .start = 528, .end = 529 } } } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 538, .end = 561 }, .params = {  }, .ret = null, .scope = {  } } }
