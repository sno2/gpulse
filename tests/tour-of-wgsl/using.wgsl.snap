ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 4 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 15, .end = 16 }, .access_mode = null, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 18, .end = 21 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 24, .end = 27 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 35, .end = 37 }, .typ = null, .value = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 40, .value = ast.Node{ .identifier = ast.Span{ .start = 41, .end = 42 } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 69, .value = ast.Node{ .identifier = ast.Span{ .start = 70, .end = 72 } } } }, .op_idx = 73, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 75, .end = 78 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 142, .end = 145 }, .access_mode = null, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 147, .end = 150 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 156, .end = 170 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 181, .end = 188 }, .typ = null, .value = ast.Node{ .ref = ast.UnaryOp{ .op_idx = 191, .value = ast.Node{ .identifier = ast.Span{ .start = 192, .end = 195 } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 223, .value = ast.Node{ .identifier = ast.Span{ .start = 224, .end = 231 } } } }, .op_idx = 232, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .op_idx = 234, .value = ast.Node{ .identifier = ast.Span{ .start = 235, .end = 242 } } } }, .op_idx = 243, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 245, .end = 246 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 272, .end = 276 }, .params = {  }, .ret = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 283, .end = 286 } }, .op_idx = 287, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 289, .end = 293 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 297, .end = 311 } }, .args = {  } } } } } }
