ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .binding = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 9, .end = 10 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } }, ast.Attribute{ .group = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 19, .end = 20 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 35, .end = 40 }, .access_mode = ast.AccessMode.read_write, .addr_space = ast.AddrSpace.uniform, .typ = ast.Node{ .identifier = ast.Span{ .start = 43, .end = 46 } }, .value = null } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .vertex = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 59, .end = 67 }, .params = { ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 77, .end = 89 } } } }, .inner = ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 91, .end = 103 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 106, .end = 109 } } } } } } }, .ret = ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .builtin = ast.Node{ .identifier = ast.Span{ .start = 123, .end = 131 } } } }, .inner = ast.Node{ .identifier = ast.Span{ .start = 133, .end = 138 } } } }, .scope = { ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 149, .end = 152 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 155, .end = 160 } }, .args = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 166, .end = 170 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 172, .end = 175 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 178, .end = 181 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 188, .end = 192 } }, .args = { ast.Node{ .negate = ast.UnaryOp{ .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 194, .end = 197 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, ast.Node{ .negate = ast.UnaryOp{ .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 200, .end = 203 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 210, .end = 214 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 216, .end = 219 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } }, ast.Node{ .negate = ast.UnaryOp{ .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 222, .end = 225 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } } } } } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 242, .end = 247 } }, .args = { ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 248, .end = 251 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 252, .end = 264 } } } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 267, .end = 268 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 270, .end = 271 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } }
ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .fragment = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 290, .end = 299 }, .params = {  }, .ret = ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .location = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 315, .end = 316 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .identifier = ast.Span{ .start = 318, .end = 323 } } } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 335, .end = 339 } }, .args = { ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 340, .end = 341 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 343, .end = 346 } }, .args = { ast.Node{ .div = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 347, .end = 350 } }, .args = { ast.Node{ .identifier = ast.Span{ .start = 351, .end = 356 } } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 360, .end = 363 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 366, .end = 367 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 369, .end = 370 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } } } } }
