ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 53, .end = 63 }, .params = {  }, .ret = null, .scope = {  } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 134, .end = 144 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 145, .end = 153 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 156, .end = 159 } } } } }, .ret = null, .scope = {  } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 229, .end = 245 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 251, .end = 254 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 268, .end = 270 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 339, .end = 346 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 347, .end = 348 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 351, .end = 354 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 356, .end = 357 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 360, .end = 363 } } } } }, .ret = ast.Node{ .identifier = ast.Span{ .start = 368, .end = 371 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .div = ast.BinaryOp{ .lhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 386, .end = 387 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 390, .end = 391 } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 395, .end = 396 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
