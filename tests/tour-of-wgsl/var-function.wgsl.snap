ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 3, .end = 4 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 10, .end = 13 } }, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 87, .end = 88 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 91, .end = 94 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 97, .end = 99 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 173, .end = 174 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 177, .end = 180 } }, .value = null } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 270, .end = 271 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = null, .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 274, .end = 275 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 278, .end = 279 } } } } } }, ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 353, .end = 354 } }, .rhs = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 357, .end = 358 } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 361, .end = 362 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }, ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .identifier = ast.Span{ .start = 376, .end = 377 } } } } } } }
