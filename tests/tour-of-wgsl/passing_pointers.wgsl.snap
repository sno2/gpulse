ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 13, .end = 24 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 26, .end = 29 } }, .value = null } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 44, .end = 56 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 58, .end = 61 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 66, .end = 79 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 80, .end = 81 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 83, .end = 86 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 87, .end = 94 } }, ast.Node{ .identifier = ast.Span{ .start = 95, .end = 98 } } } } } } } }, .ret = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 104, .end = 105 } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 108, .end = 109 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 116, .end = 138 }, .params = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 139, .end = 140 }, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 142, .end = 145 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 146, .end = 154 } }, ast.Node{ .identifier = ast.Span{ .start = 155, .end = 158 } } } } } } } }, .ret = null, .scope = { ast.Node{ .assign = ast.BinaryOp{ .lhs = ast.Node{ .deref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 164, .end = 165 } } } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 168, .end = 169 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 177, .end = 190 }, .params = {  }, .ret = null, .scope = { ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 197, .end = 210 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 212, .end = 223 } } } } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 228, .end = 241 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 243, .end = 255 } } } } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 264, .end = 265 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 267, .end = 270 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 273, .end = 275 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 279, .end = 301 } }, .args = { ast.Node{ .ref = ast.UnaryOp{ .value = ast.Node{ .identifier = ast.Span{ .start = 303, .end = 304 } } } } } } } } } }
ast.Node{ .struct_decl = ast.StructDecl{ .name = ast.Span{ .start = 418, .end = 424 }, .members = { ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 429, .end = 436 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 438, .end = 441 } } } }, ast.Node{ .labeled_type = ast.LabeledType{ .name = ast.Span{ .start = 445, .end = 453 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 455, .end = 458 } } } } } } }
ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 475, .end = 481 }, .access_mode = ast.AccessMode.read, .addr_space = ast.AddrSpace.private, .typ = ast.Node{ .identifier = ast.Span{ .start = 483, .end = 489 } }, .value = null } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 494, .end = 527 }, .params = {  }, .ret = null, .scope = {  } } }
