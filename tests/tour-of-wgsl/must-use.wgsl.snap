ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .must_use = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 13, .end = 14 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 20, .end = 23 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 35, .end = 37 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 45, .end = 46 }, .params = {  }, .ret = ast.Node{ .identifier = ast.Span{ .start = 52, .end = 55 } }, .scope = { ast.Node{ .ret = ast.Ret{ .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 67, .end = 69 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 77, .end = 78 }, .params = {  }, .ret = null, .scope = { ast.Node{ .let_decl = ast.LetDecl{ .name = ast.Span{ .start = 89, .end = 90 }, .typ = null, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 93, .end = 94 } }, .args = {  } } } } }, ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 123, .end = 124 } }, .args = {  } } }, ast.Node{ .if_stmt = ast.If{ .expression = ast.Node{ .less_than = ast.BinaryOp{ .lhs = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .identifier = ast.Span{ .start = 171, .end = 172 } }, .args = {  } } }, .op_idx = 175, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 177, .end = 178 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .attributes = null, .scope = {  }, .next = null } } } } }
