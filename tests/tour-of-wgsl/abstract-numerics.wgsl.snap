ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 6, .end = 8 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 11, .end = 24 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 66, .end = 69 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 72, .end = 73 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 316, .end = 322 }, .typ = null, .value = ast.Node{ .mul = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 325, .end = 327 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 330, .end = 333 } } } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 399, .end = 437 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 440, .end = 443 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 446, .end = 449 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 457, .end = 495 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 498, .end = 501 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 504, .end = 507 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 515, .end = 553 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 556, .end = 559 } }, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 562, .end = 565 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }
ast.Node{ .const_decl = ast.ConstDecl{ .name = ast.Span{ .start = 622, .end = 662 }, .typ = ast.Node{ .identifier = ast.Span{ .start = 665, .end = 668 } }, .value = ast.Node{ .add = ast.BinaryOp{ .lhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 671, .end = 676 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } }, .rhs = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 679, .end = 682 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } } }
ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 688, .end = 689 }, .params = {  }, .ret = null, .scope = { ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 897, .end = 935 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 938, .end = 940 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 990, .end = 1030 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 1033, .end = 1037 }, .kind = ast.NumberLiteral.NumberKind.abstract_float } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1086, .end = 1098 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1101, .end = 1104 } }, .value = ast.Node{ .identifier = ast.Span{ .start = 1107, .end = 1145 } } } }, ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 1155, .end = 1167 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 1170, .end = 1173 } }, .value = ast.Node{ .identifier = ast.Span{ .start = 1176, .end = 1216 } } } } } } }
