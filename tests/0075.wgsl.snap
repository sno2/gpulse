ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 25, .end = 26 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .y = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 27, .end = 28 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } }, .z = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 29, .end = 30 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 35, .end = 41 }, .params = {  }, .ret = null, .scope = {  } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 74, .end = 76 }, .kind = ast.NumberLiteral.NumberKind.u32 } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 81, .end = 89 }, .params = {  }, .ret = null, .scope = {  } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .id = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 144, .end = 146 }, .kind = ast.NumberLiteral.NumberKind.abstract_int } } } }, .inner = ast.Node{ .override_decl = ast.OverrideDecl{ .name = ast.Span{ .start = 157, .end = 168 }, .typ = null, .value = ast.Node{ .number_literal = ast.NumberLiteral{ .span = ast.Span{ .start = 171, .end = 174 }, .kind = ast.NumberLiteral.NumberKind.u32 } } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void }, ast.Attribute{ .workgroup_size = ast.WorkgroupSizeAttribute{ .x = ast.Node{ .identifier = ast.Span{ .start = 201, .end = 212 } }, .y = null, .z = null } } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 217, .end = 225 }, .params = {  }, .ret = null, .scope = {  } } } } } ast.Node{ .attributed = ast.Attributed{ .attributes = { ast.Attribute{ .compute = void } }, .inner = ast.Node{ .fn_decl = ast.FnDecl{ .name = ast.Span{ .start = 306, .end = 316 }, .params = {  }, .ret = null, .scope = {  } } } } } 