ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 4, .end = 5 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 7, .end = 11 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 12, .end = 15 } } } } }, .value = ast.Node{ .call = ast.Call{ .callee = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 19, .end = 23 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 24, .end = 27 } } } } }, .args = { ast.Node{ .number_literal = ast.Span{ .start = 29, .end = 31 } }, ast.Node{ .number_literal = ast.Span{ .start = 33, .end = 35 } }, ast.Node{ .number_literal = ast.Span{ .start = 37, .end = 39 } } } } } } } ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 46, .end = 47 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 49, .end = 52 } }, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 55, .end = 56 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 57, .end = 58 } } } } } } ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 84, .end = 85 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 87, .end = 91 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 92, .end = 95 } } } } }, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 99, .end = 100 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 101, .end = 103 } } } } } } ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 129, .end = 130 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .template = ast.Template{ .name = ast.Span{ .start = 132, .end = 136 }, .args = { ast.Node{ .identifier = ast.Span{ .start = 137, .end = 140 } } } } }, .value = ast.Node{ .member = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 144, .end = 145 } }, .rhs = ast.Node{ .identifier = ast.Span{ .start = 146, .end = 149 } } } } } } ast.Node{ .var_decl = ast.VarDecl{ .name = ast.Span{ .start = 179, .end = 180 }, .access_mode = ast.AccessMode.read, .addr_space = null, .typ = ast.Node{ .identifier = ast.Span{ .start = 182, .end = 185 } }, .value = ast.Node{ .index = ast.BinaryOp{ .lhs = ast.Node{ .identifier = ast.Span{ .start = 188, .end = 189 } }, .rhs = ast.Node{ .number_literal = ast.Span{ .start = 190, .end = 191 } } } } } } 